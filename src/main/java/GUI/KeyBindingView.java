/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.util.stream.IntStream;
import org.jnativehook.NativeInputEvent;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.mouse.NativeMouseEvent;

/**
 *
 * @author Kav
 */
public class KeyBindingView extends BaseView {
    private static boolean isRebindingFirstKey = false;
    private static boolean isRebindingSecondKey = false;

    private String tmpBindedActionKeys[] = bindedActionKeys.clone();
    
    //Arrays containing keycodes to be ignored if pressed
    private static final int criticalKeyEvents[] = {};
    private static final int criticalMouseEvents[] = {1,2};

    /**
     * Creates new form KeyBindingView
     */
    public KeyBindingView() {
        super();
        addWindowListener(this);
        initComponents();
        if(tmpBindedActionKeys[0] != null) jLabel3.setText(tmpBindedActionKeys[0]);
        if(tmpBindedActionKeys[1] != null) jLabel4.setText(tmpBindedActionKeys[1]);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Capture Key");

        jButton1.setText("Rebind");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Deploy Key");

        jLabel3.setText("...");

        jButton2.setText("Rebind");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("OK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jLabel3.setText("Enter Key...");
        isRebindingFirstKey = true;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jLabel4.setText("Enter Key...");
        isRebindingSecondKey = true;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        bindedActionKeys = tmpBindedActionKeys;
        setVisible(false);
        System.runFinalization();
        isRebinding = false;
    }//GEN-LAST:event_jButton3ActionPerformed
    
    @Override
    public void nativeKeyPressed(NativeKeyEvent nke) {
        undertakeEventAction(nke);
    }

    @Override
    public void nativeMousePressed(NativeMouseEvent nme) {
        undertakeEventAction(nme);
    }
    
    private void undertakeEventAction(NativeInputEvent nie){
        if((isRebindingFirstKey || isRebindingSecondKey) && !isCriticalKey(nie)){
            String prettyKeyStringValue = "";
            String keyValue = "";
            if(nie instanceof NativeKeyEvent){
                NativeKeyEvent nke = (NativeKeyEvent) nie;
                keyValue = String.valueOf(nke.getKeyCode());
                prettyKeyStringValue = "KeyCode: " + keyValue;
            }else if(nie instanceof NativeMouseEvent){
                NativeMouseEvent nme = (NativeMouseEvent) nie;
                keyValue = String.valueOf(nme.getButton());
                prettyKeyStringValue = "MouseKey: " + keyValue;
            }else{
                keyValue = String.valueOf(nie.getID());
                prettyKeyStringValue = "Unrecognized input ("+keyValue+")";
            }
            if(isRebindingFirstKey){
                if(tmpBindedActionKeys[1] != null && tmpBindedActionKeys[1].equalsIgnoreCase(prettyKeyStringValue)){
                    showErrorPopup(getContentPane(),"Il tasto è già stato mappato");
                }else{
                     tmpBindedActionKeys[0] = prettyKeyStringValue;
                     jLabel3.setText(prettyKeyStringValue);
                }
                isRebindingFirstKey = false;
            }else{
                if(tmpBindedActionKeys[0] != null && tmpBindedActionKeys[0].equalsIgnoreCase(prettyKeyStringValue)){
                    showErrorPopup(getContentPane(),"Il tasto è già stato mappato");
                }else{
                     tmpBindedActionKeys[1] = prettyKeyStringValue;
                     jLabel4.setText(prettyKeyStringValue);
                }
                isRebindingSecondKey = false;
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KeyBindingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KeyBindingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KeyBindingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KeyBindingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KeyBindingView();
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void checkWetherActionOccured(NativeInputEvent e) {
        //No action should be taken in the keybinding 
    }
    
    /* Checks wether a critical key is pressed and returns false if it's not (Mouse event)*/
    private boolean isCriticalKey(NativeInputEvent nie) {
        if(nie instanceof NativeMouseEvent){
            NativeMouseEvent nme = (NativeMouseEvent) nie;
            int mouseButton = nme.getButton();
            if(IntStream.of(criticalMouseEvents).anyMatch(x -> x == mouseButton)){
                return true;
            }
        }else if(nie instanceof NativeKeyEvent){
            NativeKeyEvent nke = (NativeKeyEvent) nie;
            int keyCode = nke.getKeyCode();
            if(IntStream.of(criticalKeyEvents).anyMatch(x -> x == keyCode)){
                return true;
            }
        }
        return false;
    }
    
}
